package me.ren.projecteuler.problem14;

/**
 * Created by N on 4/25/2015.
 */
public class LongestCollatzSequence {

  public LongestCollatzSequence(){}

  public int getLongestCollatzSequence(){

    int max = 0,
        maxNum = 0,
        cnt;

    for(int n = 1; n < 1000000; ++n){
      cnt = countSequence(n);
      if(cnt > max){
        max = cnt;
        maxNum = n;
      }
    }

    return maxNum;
  }

  // Recursive. For fun. Currently overflows the stack. =/
  public int recursiveCountSequence(int n){
    if(n==1)
      return 1;
    else if(n%2==0)
      return recursiveCountSequence(n/2)+1;
    else
      return recursiveCountSequence(3*n+1)+1;
  }

  public int countSequence(int argN){
    // An int can't fit the largest number generated by this function
    // between 1-999999. A long can.
    long n = (long)argN;
    int cntSeq = 1;
    while(n > 1){
      if(n%2 == 0){
        n=(n/2);
        ++cntSeq;
      }else{
        n=3*n+1;
        ++cntSeq;
      }
    }

    return cntSeq;
  }
}
