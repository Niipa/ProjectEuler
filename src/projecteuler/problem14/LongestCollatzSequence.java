/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Menard "Ren" Soliven
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package projecteuler.problem14;

public class LongestCollatzSequence {

  public LongestCollatzSequence(){}

  public int getLongestCollatzSequence(){

    int max = 0,
        maxNum = 0,
        cnt;

    for(int n = 1; n < 1000000; ++n){
      cnt = countSequence(n);
      if(cnt > max){
        max = cnt;
        maxNum = n;
      }
    }

    return maxNum;
  }

  // Recursive. For fun. Currently overflows the stack. =/
  public int recursiveCountSequence(int n){
    if(n==1)
      return 1;
    else if(n%2==0)
      return recursiveCountSequence(n/2)+1;
    else
      return recursiveCountSequence(3*n+1)+1;
  }

  public int countSequence(int argN){
    // An int can't fit the largest number generated by this function
    // between 1-999999. A long can.
    long n = (long)argN;
    int cntSeq = 1;
    while(n > 1){
      if(n%2 == 0){
        n=(n/2);
        ++cntSeq;
      }else{
        n=3*n+1;
        ++cntSeq;
      }
    }

    return cntSeq;
  }
}
